一、gRPC：用官网的一句话概括就是一个高性能、开源的通用RPC框架。
【拓展-RPC】远程过程调用，所谓RPC(remote procedure call 远程过程调用)框架实际是提供了一套机制，使得应用程序之间可以进行通信，而且也遵从server/client模型。使用的时候客户端调用server端提供的接口就像是调用本地的函数一样。



二、gRPC相对于传统的Restful API优势
1、gRPC可以通过protobuf来定义接口，从而可以有更加严格的接口约束条件。
2、采用的是二进制编码，传输数据更小，性能更佳。
3、gRPC采用的是http2，很方便的支持流式通信。
4、支持向前兼容（新加字段采用默认值）和向后兼容（忽略新加字段），简化升级
5、支持多种语言（可以把proto文件看做IDL文件）
总结来说使用场景：1、严格的接口约束；2、对性能要求更高时。

三、gRPC缺点
1、GRPC尚未提供连接池，需要自行实现
2、尚未提供“服务发现”、“负载均衡”机制。【结合zookeeper使用】
3、因为基于HTTP2，绝大部多数HTTP Server、Nginx都尚不支持

四：简单demo实现（Python版）
1、定义接口文件helloworld.proto
2、安装grpc库和代码生成工具
pip install grpcio
pip install grpcio-tools
3、编译proto文件，根据proto文件生成python文件
python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. helloworld.proto
生成文件如：
helloworld_pb2.py: 用来和 protobuf 数据进行交互
helloworld_pb2_grpc.py: 用来和 grpc 进行交互
4、对应的接口具体实现文件，自己创建并实现hellword_grpc_server.py
5、客户端调用文件，自己创建并实现调用hellword_grpc_client.py


【拓展-http1.0、http1.1、http2.0之间的区别】
http1.0和http1.1区别：
1、连接方面：前者使用的非持久连接即每次请求建立一个连接，后者默认使用持久连接
2、缓存方面：后者缓存策略更丰富如cache-control
3、状态码：后者状态码更丰富，新增了24个，如409
4、宽带优化方法：前者每次都需要将整个对象传过来，而后者支持只发送header信息，如401的时候。
5、host头处理：主要针一台物理机有多个虚拟主机的情况处理情况不一样，http1.0可能有问题，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。
存在问题：
虽然HTTP1.x支持了keep-alive，来弥补多次创建连接产生的延迟，但是keepalive使用多了同样会给服务端带来大量的性能压力，并且对于单个文件被不断请求的服务(例如图片存放网站)，keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。

HTTP1.1和HTTP2.0的区别：
1、多路复用：后者支持多路复用，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。而这个强大的功能则是基于“二进制分帧”的特性。
2、首部压缩：前者不支持，后者支持，数据更小，使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。
3、服务器推送：前者不支持，当我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源。
